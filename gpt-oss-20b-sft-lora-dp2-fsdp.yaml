base_model: openai/gpt-oss-20b
use_kernels: true

quantization_config:
  load_in_4bit: true
  bnb_4bit_compute_dtype: "bfloat16"
  bnb_4bit_quant_type: "nf4"
  bnb_4bit_use_double_quant: true

plugins:
  - axolotl.integrations.cut_cross_entropy.CutCrossEntropyPlugin

fsdp_version: 2
fsdp_config:
  offload_params: false
  cpu_ram_efficient_loading: true
  auto_wrap_policy: TRANSFORMER_BASED_WRAP
  transformer_layer_cls_to_wrap: GptOssDecoderLayer # どの層をFSDPでラップするか指定
  state_dict_type: FULL_STATE_DICT
  reshard_after_forward: true # forward（順伝播）後にパラメータを再共有するかどうかを制御
  # reshared_after_forward: true にすると、forward後に再度パラメータを共有（reshard）することで、次の backward パスに備えます
  fsdp_type: FULL_SHARD # 全てのパラメータを分割して管理
  mixed_precision: true # 計算精度を落としてメモリ節約（bf16と連携）
  use_orig_params: true # 学習開始後エラーで追加  
  limit_all_gathers: true # 通信の最適化
  #all-gather 操作（分散されたパラメータを一時的に集める処理）が forward や backward パスの中で頻繁に行われます。
  # これらの操作は通信コストが高く、同時に多数の all-gather を実行すると GPUメモリの圧迫や通信の競合が発生する可能性
  cpu_offload: false

# マルチGPU用の分散型設定
# deepspeed: false
ddp: false
mixed_precision: "bf16"

# 実験的なデバイススキップを無効化（FSDPでは不要）
experimental_skip_move_to_device: false

hub_model_id: ikedachin/gpt-oss-20b-dp-v2-fsdp
hub_strategy: "end"
hf_use_auth_token: true

wandb_project: axolotl
wandb_name: gpt-oss-20b-dp-v2-sft-fsdp
logging_steps: 5

datasets:
  - path: ikedachin/difficult_problem_dataset_v2
    split: train
    type:
      field_instruction: input
      field_output: output
      format: |
        User: {instruction}
        Assistant:
      no_input_format: |
        User: {instruction}
        Assistant:

train_on_inputs: false
dataset_prepared_path: last_run_prepared
val_set_size: 0
output_dir: ./outputs/gpt-oss-out-merged/

sequence_len: 8192
sample_packing: true

adapter: lora
lora_r: 8
lora_alpha: 16
lora_dropout: 0.0
lora_target_modules:
  - q_proj
  - k_proj
  - v_proj
  - o_proj
  - gate_proj
  - up_proj
  - down_proj

# 4090×2に適したバッチサイズ調整
gradient_accumulation_steps: 4  # 減少
micro_batch_size: 1
num_epochs: 1

optimizer: adamw_torch_8bit
lr_scheduler: cosine
cosine_min_lr_ratio: 0.01
learning_rate: 1e-5
max_grad_norm: 1.0

bf16: true
tf32: true

flash_attention: true
attn_implementation: kernels-community/vllm-flash-attn3

gradient_checkpointing: true
activation_offloading: false  # FSDPでは不要
saves_per_epoch: 1
warmup_ratio: 0.1

# FSDP用メモリ効率設定
# max_memory_MB: 20000  # 各GPUのメモリ制限（調整が必要かも）

special_tokens:
eot_tokens:
  - "<|end|>"

merge_adapter: true
save_safetensors: true
